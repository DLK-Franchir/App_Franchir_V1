'use client';

import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { useEffect, useState, useRef } from 'react';
import { PageLoadingState } from '@/components/ui/loading-states';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  MessageSquare, 
  Send, 
  Paperclip,
  Search,
  Phone,
  Video,
  User,
  Clock,
  CheckCheck,
  ArrowLeft,
  MoreVertical,
  Smile,
  Info,
  Archive,
  Star,
  Loader2
} from 'lucide-react';

import { motion, AnimatePresence } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'react-hot-toast';

interface Conversation {
  id: string;
  title?: string;
  isGroup: boolean;
  participants: {
    user: {
      id: string;
      firstName?: string;
      lastName?: string;
      role: string;
    };
  }[];
  messages: {
    id: string;
    content: string;
    createdAt: string;
    sender: {
      id: string;
      firstName?: string;
      lastName?: string;
    };
  }[];
  _count: {
    messages: number;
  };
}

interface Message {
  id: string;
  content: string;
  createdAt: string;
  status: string;
  sender: {
    id: string;
    firstName?: string;
    lastName?: string;
    role: string;
  };
  recipient?: {
    id: string;
    firstName?: string;
    lastName?: string;
  };
}

export default function MessagesPage() {
  const { data: session } = useSession();
  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.2 });
  const [selectedConversationId, setSelectedConversationId] = useState<string>('');
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [isMobileContactView, setIsMobileContactView] = useState(true);
  const [isTyping, setIsTyping] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isSending, setIsSending] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [filteredConversations, setFilteredConversations] = useState<Conversation[]>([]);

  // Charger les conversations au démarrage
  useEffect(() => {
    loadConversations();
  }, []);

  // Charger les messages quand une conversation est sélectionnée
  useEffect(() => {
    if (selectedConversationId) {
      loadMessages(selectedConversationId);
    }
  }, [selectedConversationId]);

  // Auto-scroll vers le bas des messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Filtrage des conversations
  useEffect(() => {
    const filtered = conversations.filter(conversation => {
      const otherParticipant = conversation.participants.find(p => p.user.id !== session?.user?.id);
      const name = `${otherParticipant?.user.firstName || ''} ${otherParticipant?.user.lastName || ''}`.toLowerCase();
      const lastMessage = conversation.messages[0]?.content?.toLowerCase() || '';
      
      return name.includes(searchQuery.toLowerCase()) || 
             lastMessage.includes(searchQuery.toLowerCase()) ||
             (conversation.title?.toLowerCase().includes(searchQuery.toLowerCase()));
    });
    setFilteredConversations(filtered);
  }, [searchQuery, conversations, session?.user?.id]);

  const loadConversations = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/conversations');
      
      if (!response.ok) {
        throw new Error('Erreur lors du chargement des conversations');
      }

      const data = await response.json();
      setConversations(data.conversations || []);
      
      // Sélectionner automatiquement la première conversation
      if (data.conversations && data.conversations.length > 0) {
        setSelectedConversationId(data.conversations[0].id);
      }
    } catch (error) {
      console.error('Erreur chargement conversations:', error);
      toast.error('Impossible de charger les conversations');
    } finally {
      setIsLoading(false);
    }
  };

  const loadMessages = async (conversationId: string) => {
    try {
      const response = await fetch(`/api/conversations/${conversationId}/messages`);
      
      if (!response.ok) {
        throw new Error('Erreur lors du chargement des messages');
      }

      const data = await response.json();
      setMessages(data.messages || []);

      // Marquer les messages non lus comme lus
      await markMessagesAsRead(conversationId);
    } catch (error) {
      console.error('Erreur chargement messages:', error);
      toast.error('Impossible de charger les messages');
    }
  };

  const markMessagesAsRead = async (conversationId: string) => {
    try {
      const unreadMessages = messages.filter(m => 
        m.sender.id !== session?.user?.id && m.status !== 'READ'
      );

      for (const message of unreadMessages) {
        await fetch(`/api/messages/${message.id}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ status: 'READ' })
        });
      }
    } catch (error) {
      console.error('Erreur marquage messages lus:', error);
    }
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedConversationId) return;

    try {
      setIsSending(true);
      setIsTyping(true);

      const response = await fetch(`/api/conversations/${selectedConversationId}/messages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          content: newMessage.trim(),
          recipientId: getOtherParticipantId()
        })
      });

      if (!response.ok) {
        throw new Error('Erreur lors de l\'envoi du message');
      }

      const data = await response.json();
      
      // Ajouter le nouveau message à la liste
      setMessages(prev => [...prev, data.message]);
      setNewMessage('');
      
      // Recharger les conversations pour mettre à jour le dernier message
      loadConversations();
      
      toast.success('Message envoyé !');
    } catch (error) {
      console.error('Erreur envoi message:', error);
      toast.error('Erreur lors de l\'envoi du message');
    } finally {
      setIsSending(false);
      setIsTyping(false);
    }
  };

  const handleConversationSelect = (conversationId: string) => {
    setSelectedConversationId(conversationId);
    setIsMobileContactView(false);
  };

  const handleBackToContacts = () => {
    setIsMobileContactView(true);
  };

  const getOtherParticipantId = () => {
    const currentConversation = conversations.find(c => c.id === selectedConversationId);
    if (!currentConversation) return null;
    
    const otherParticipant = currentConversation.participants.find(p => p.user.id !== session?.user?.id);
    return otherParticipant?.user.id || null;
  };

  const getConversationName = (conversation: Conversation) => {
    if (conversation.title) return conversation.title;
    
    const otherParticipant = conversation.participants.find(p => p.user.id !== session?.user?.id);
    if (!otherParticipant) return 'Conversation';
    
    return `${otherParticipant.user.firstName || ''} ${otherParticipant.user.lastName || ''}`.trim() || 'Utilisateur';
  };

  const getParticipantRole = (conversation: Conversation) => {
    const otherParticipant = conversation.participants.find(p => p.user.id !== session?.user?.id);
    return otherParticipant?.user.role || 'PATIENT';
  };

  const getAvatarInitials = (conversation: Conversation) => {
    const otherParticipant = conversation.participants.find(p => p.user.id !== session?.user?.id);
    if (!otherParticipant) return 'U';
    
    const firstName = otherParticipant.user.firstName || '';
    const lastName = otherParticipant.user.lastName || '';
    
    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase() || 'U';
  };

  const formatMessageTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 24) {
      return date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
    } else if (diffInHours < 48) {
      return 'Hier';
    } else {
      return date.toLocaleDateString('fr-FR', { day: 'numeric', month: 'short' });
    }
  };

  const isOwnMessage = (message: Message) => {
    return message.sender.id === session?.user?.id;
  };

  const selectedConversation = conversations.find(c => c.id === selectedConversationId);

  if (isLoading) {
    return <PageLoadingState />;
  }

  return (
    <div className="min-h-screen bg-franchir-cream">
      <div className="container mx-auto px-2 sm:px-4 py-4 sm:py-8 max-w-7xl">
        {/* Header Section - Hidden on mobile when in chat view */}
        <motion.div 
          className={`mb-6 ${!isMobileContactView ? 'hidden lg:block' : ''}`}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
        >
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold text-franchir-blue mb-2 font-montserrat">
                Messages
              </h1>
              <p className="text-franchir-secondary font-opensans">
                Communication sécurisée avec votre équipe médicale
              </p>
            </div>
            <div className="hidden sm:flex gap-2">
              <Badge className="bg-franchir-blue text-white">
                Sécurisé
              </Badge>
              <Badge className="bg-franchir-red text-white">
                {conversations.reduce((acc, conv) => acc + conv._count.messages, 0)} Conversations
              </Badge>
            </div>
          </div>
        </motion.div>

        {/* Messages Interface - Responsive Layout */}
        <motion.div 
          className="grid grid-cols-1 lg:grid-cols-4 gap-4 h-[calc(100vh-12rem)] lg:h-[calc(100vh-10rem)]"
          ref={ref}
          initial={{ opacity: 0, y: 20 }}
          animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
          transition={{ duration: 0.8 }}
        >
          {/* Conversations List - Always visible on desktop, mobile toggle */}
          <motion.div
            className={`lg:col-span-1 lg:block ${isMobileContactView ? 'block' : 'hidden'}`}
            initial={{ x: -20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="bg-franchir-white border-franchir-border h-full flex flex-col shadow-lg">
              <CardHeader className="pb-3 border-b border-franchir-border">
                <div className="flex items-center justify-between mb-3">
                  <CardTitle className="text-franchir-blue font-montserrat flex items-center gap-2">
                    <MessageSquare className="h-5 w-5" />
                    Conversations
                  </CardTitle>
                  <div className="flex items-center gap-2">
                    <Button size="sm" variant="ghost" className="text-franchir-blue hover:bg-franchir-cream">
                      <Star className="h-4 w-4" />
                    </Button>
                    <Button size="sm" variant="ghost" className="text-franchir-blue hover:bg-franchir-cream">
                      <MoreVertical className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-franchir-secondary" />
                  <Input 
                    placeholder="Rechercher..." 
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10 border-franchir-border focus:ring-franchir-blue focus:border-franchir-blue bg-franchir-cream/30"
                  />
                </div>
              </CardHeader>
              <CardContent className="flex-1 overflow-y-auto p-0">
                <div className="space-y-1 p-2">
                  <AnimatePresence>
                    {(filteredConversations.length > 0 ? filteredConversations : conversations).map((conversation, index) => (
                      <motion.div
                        key={conversation.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.2, delay: index * 0.1 }}
                        onClick={() => handleConversationSelect(conversation.id)}
                        className={`group p-3 rounded-lg cursor-pointer transition-all duration-200 hover:shadow-md ${
                          selectedConversationId === conversation.id 
                            ? 'bg-franchir-blue text-white shadow-md' 
                            : 'hover:bg-franchir-cream/70 border border-transparent hover:border-franchir-blue/10'
                        }`}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <div className="flex items-center gap-3">
                          <div className="relative">
                            <div className={`flex h-12 w-12 items-center justify-center rounded-full text-sm font-bold transition-colors ${
                              selectedConversationId === conversation.id 
                                ? 'bg-white text-franchir-blue' 
                                : 'bg-gradient-to-br from-franchir-blue to-franchir-blue/80 text-white group-hover:shadow-lg'
                            }`}>
                              {getAvatarInitials(conversation)}
                            </div>
                            <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-green-500 border-2 border-white rounded-full animate-pulse"></div>
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <h3 className={`font-semibold truncate font-opensans text-sm ${
                                selectedConversationId === conversation.id ? 'text-white' : 'text-franchir-primary'
                              }`}>
                                {getConversationName(conversation)}
                              </h3>
                              <div className="flex items-center gap-2">
                                <span className={`text-xs ${
                                  selectedConversationId === conversation.id ? 'text-white/70' : 'text-franchir-secondary'
                                }`}>
                                  {conversation.messages[0] ? formatMessageTime(conversation.messages[0].createdAt) : ''}
                                </span>
                                {conversation._count.messages > 0 && (
                                  <Badge className="bg-franchir-red text-white text-xs px-2 py-1 animate-bounce">
                                    {conversation._count.messages}
                                  </Badge>
                                )}
                              </div>
                            </div>
                            <p className={`text-xs truncate mb-1 ${
                              selectedConversationId === conversation.id ? 'text-white/80' : 'text-franchir-blue'
                            }`}>
                              {getParticipantRole(conversation)}
                            </p>
                            <p className={`text-xs truncate ${
                              selectedConversationId === conversation.id ? 'text-white/70' : 'text-franchir-secondary'
                            }`}>
                              {conversation.messages[0]?.content || 'Aucun message'}
                            </p>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                  {searchQuery && filteredConversations.length === 0 && (
                    <div className="text-center py-8 text-franchir-secondary">
                      <Search className="h-8 w-8 mx-auto mb-2 opacity-50" />
                      <p className="text-sm">Aucune conversation trouvée</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Chat Area - Always visible on desktop, mobile toggle */}
          <motion.div 
            className={`lg:col-span-3 lg:block ${!isMobileContactView ? 'block' : 'hidden'}`}
            initial={{ x: 20, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="bg-franchir-white border-franchir-border h-full flex flex-col shadow-lg">
              {/* Chat Header */}
              {selectedConversation && (
                <CardHeader className="pb-3 border-b border-franchir-border bg-gradient-to-r from-franchir-cream/30 to-transparent">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={handleBackToContacts}
                        className="lg:hidden text-franchir-blue hover:bg-franchir-cream"
                      >
                        <ArrowLeft className="h-4 w-4" />
                      </Button>
                      <div className="relative">
                        <div className="flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-br from-franchir-blue to-franchir-blue/80 text-white font-bold shadow-lg">
                          {getAvatarInitials(selectedConversation)}
                        </div>
                        <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-green-500 border-2 border-white rounded-full animate-pulse"></div>
                      </div>
                      <div className="flex-1">
                        <h3 className="font-bold text-franchir-primary font-opensans flex items-center gap-2">
                          {getConversationName(selectedConversation)}
                          <Badge className="bg-green-100 text-green-700 text-xs">En ligne</Badge>
                        </h3>
                        <p className="text-sm text-franchir-blue font-medium">
                          {getParticipantRole(selectedConversation)}
                        </p>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button size="sm" className="bg-green-600 hover:bg-green-700 text-white shadow-md hover:shadow-lg transition-all duration-200" title="Appeler">
                        <Phone className="h-4 w-4" />
                      </Button>
                      <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white shadow-md hover:shadow-lg transition-all duration-200" title="Appel vidéo">
                        <Video className="h-4 w-4" />
                      </Button>
                      <Button size="sm" variant="outline" className="border-franchir-border text-franchir-blue hover:bg-franchir-cream" title="Plus d'options">
                        <MoreVertical className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
              )}

              {/* Messages */}
              <CardContent className="flex-1 overflow-y-auto p-4 bg-gradient-to-b from-franchir-cream/10 to-transparent">
                <div className="space-y-6">
                  <AnimatePresence>
                    {messages.map((message, index) => (
                      <motion.div
                        key={message.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                        className={`flex ${isOwnMessage(message) ? 'justify-end' : 'justify-start'} group`}
                      >
                        <div className={`max-w-xs sm:max-w-md lg:max-w-lg flex items-end gap-2 ${
                          isOwnMessage(message) ? 'flex-row-reverse' : 'flex-row'
                        }`}>
                          {!isOwnMessage(message) && selectedConversation && (
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-franchir-blue text-white text-xs font-medium shadow-md">
                              {getAvatarInitials(selectedConversation)}
                            </div>
                          )}
                          <div className={`px-4 py-3 rounded-2xl shadow-md backdrop-blur-sm transition-all duration-200 group-hover:shadow-lg ${
                            isOwnMessage(message) 
                              ? 'bg-gradient-to-br from-franchir-blue to-franchir-blue/90 text-white rounded-br-md' 
                              : 'bg-white border border-franchir-border text-franchir-primary rounded-bl-md'
                          }`}>
                            <p className="text-sm font-opensans leading-relaxed">{message.content}</p>
                            <div className={`flex items-center justify-between mt-2 text-xs gap-2 ${
                              isOwnMessage(message) ? 'text-white/80' : 'text-franchir-secondary'
                            }`}>
                              <span className="font-medium">{formatMessageTime(message.createdAt)}</span>
                              {isOwnMessage(message) && (
                                <CheckCheck className={`h-4 w-4 transition-colors duration-200 ${
                                  message.status === 'READ' ? 'text-blue-200' : 'text-white/60'
                                }`} />
                              )}
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                  
                  {/* Typing Indicator */}
                  <AnimatePresence>
                    {isSending && (
                      <motion.div
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        className="flex justify-end"
                      >
                        <div className="flex items-center gap-2 px-4 py-2 bg-franchir-blue/10 rounded-full">
                          <Loader2 className="h-4 w-4 animate-spin text-franchir-blue" />
                          <span className="text-xs text-franchir-secondary">Envoi en cours...</span>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
                <div ref={messagesEndRef} />
              </CardContent>

              {/* Message Input - Enhanced */}
              {selectedConversation && (
                <div className="p-4 border-t border-franchir-border bg-franchir-cream/20">
                  <div className="flex items-end gap-3">
                    <div className="flex gap-2">
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-franchir-border text-franchir-blue hover:bg-franchir-cream hover:border-franchir-blue transition-all duration-200"
                        title="Joindre un fichier"
                        disabled={isSending}
                      >
                        <Paperclip className="h-4 w-4" />
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="border-franchir-border text-franchir-blue hover:bg-franchir-cream hover:border-franchir-blue transition-all duration-200"
                        title="Emoji"
                        disabled={isSending}
                      >
                        <Smile className="h-4 w-4" />
                      </Button>
                    </div>
                    <div className="flex-1 relative">
                      <Textarea
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        placeholder="Tapez votre message... (Entrée pour envoyer, Shift+Entrée pour nouvelle ligne)"
                        className="resize-none border-franchir-border focus:ring-2 focus:ring-franchir-blue/20 focus:border-franchir-blue bg-white shadow-sm rounded-lg pr-12 min-h-[2.5rem] max-h-32"
                        rows={1}
                        disabled={isSending}
                        onKeyPress={(e) => {
                          if (e.key === 'Enter' && !e.shiftKey && !isSending) {
                            e.preventDefault();
                            handleSendMessage();
                          }
                        }}
                      />
                      <Button 
                        onClick={handleSendMessage}
                        disabled={!newMessage.trim() || isSending}
                        className={`absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 rounded-full transition-all duration-200 ${
                          newMessage.trim() && !isSending
                            ? 'bg-franchir-blue hover:bg-franchir-blue/90 text-white shadow-md hover:shadow-lg scale-100' 
                            : 'bg-franchir-cream text-franchir-secondary scale-75'
                        }`}
                      >
                        {isSending ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </Card>
          </motion.div>
        </motion.div>
      </div>
    </div>
  );
}
